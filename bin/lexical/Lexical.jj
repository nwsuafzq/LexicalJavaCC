/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Lexical)
package lexical;

public class Lexical
{
  public static void main(String args []) throws ParseException
  {
    
    Lexical parser = new Lexical(System.in);
   	  
    while (true)
    {
//      System.out.println("Reading from standard input...");
//      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        switch (Lexical.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Lexical.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Lexical)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :	 // KEYWORD
{
  < IF : "if" >
| < ELSE : "else" >
| < INT : "int" >
| < RETURN : "return" >
| < VOID : "void" >
| < WHILE : "while" >
| < MAIN :"main" >
}

TOKEN : /* 定义标识符 */
{
  < IDENTIFIER :
    < LETTER >
  | < LETTER >
    (
      < LETTER >
    | < DIGIT >
    | < UNDERSCORE >
    )*
    (
      < LETTER >
    | < DIGIT >
    )+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

TOKEN : /*定义符号*/
{
  < UNDERSCORE : "_" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < COLON : ":" >
| < LEFTPARENTHESES : "(" >
| < RIGHTPARENTHESES : ")" >
| < EQUAL : "=" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN :
{
//  < LC : "(" >
//| < RC : ")" >
 < LB : "{" >
| < RB : "}" >
  //| <RM:"]">   
  //| <LB:"{">   
  //| <RB:"}"> 
}

//TOKEN:
//{
// < LC:"(" >  
//| <RC:")">   
//| <LM:"[">   
//| <RM:"]">   
//| <LB:"{">   
//| <RB:"}"> 
//
//} 
int one_line() :
{}
{
  Procedure() "<EOF>"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void VariableDeclare(): { }
{
	(< INT > Identifier()(< COMMA >Identifier())*< SEMICOLON >)
	
	
}

void Expression(): { }
{
	Identifier()< EQUAL >
	((Identifier() (< PLUS >|< MINUS >) Identifier())
| (( < PLUS > |< MINUS > ) (Identifier() (< PLUS >|< MINUS >) Identifier()))*)
}

void Identifier(): { }
{
	< IDENTIFIER >
}
void Procedure(): { }
{
  < VOID ><MAIN><LEFTPARENTHESES><RIGHTPARENTHESES><LB>
  (VariableDeclare())*
	(Expression())*
	
  <RB>
}


void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < CONSTANT >
| "("sum()")"
}
