/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Lexical)
package lexical;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Lexical
{
  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    //Lexical parser = new Lexical(System.in);
    File file = new File(".\\programme\\programme.txt");
    FileInputStream in = new FileInputStream(file);
    SimpleCharStream scstream = new SimpleCharStream(in);
    LexicalTokenManager tm = new LexicalTokenManager(scstream);
    Lexical parser = new Lexical(tm);
    Token token = new Token();
    while (true)
    {
      token = tm.getNextToken();
      
      if (token.image != "")
      	System.out.println(token.image);
      else break;
    }
    //Boolean bool=true;
    //    while (true)
    //if(bool)    
    //   		{
    //      System.out.println("Reading from standard input...");
    //      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
    //      try
    //      {
    //        switch (Lexical.one_line())
    //        {
    //          case 0 : 
    //          System.out.println("OK.");
    //          bool=false;
    //          break;
    //          case 1 : 
    //          System.out.println("Goodbye.");
    //          break;
    //          default : 
    //          break;
    //        }
    //      }
    //      catch (Exception e)
    //      {
    //        System.out.println("NOK.");
    //        System.out.println(e.getMessage());
    //        Lexical.ReInit(System.in);
    //      }
    //      catch (Error e)
    //      {
    //        System.out.println("Oops.");
    //        System.out.println(e.getMessage());
    //        //break;
    //      }
    //    }
  }
}

PARSER_END(Lexical)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :	 // KEYWORD
{
  < IF : "if" >
| < ELSE : "else" >
| < INT : "int" >
| < RETURN : "return" >
| < VOID : "void" >
| < WHILE : "while" >
| < MAIN : "main" >
}

TOKEN : /* 定义标识符 */
{
  < IDENTIFIER :
    < LETTER >
  | < LETTER >
    (
      < LETTER >
    | < DIGIT >
    | < UNDERSCORE >
    )*
    (
      < LETTER >
    | < DIGIT >
    )+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

TOKEN : /*定义符号*/
{
  < UNDERSCORE : "_" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < COLON : ":" >
| < LEFTPARENTHESES : "(" >
| < RIGHTPARENTHESES : ")" >
| < EQUAL : "=" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : // 定义 大 中 括号
{
  < LB : "{" >
| < RB : "}" >
| < LM : "[" >
| < RM : "]" >
}

int one_line() :
{}
{
  Procedure() < EOF >
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void VariableDeclare() :
{}
{
  (
    < INT > Identifier()
    (
      < COMMA > Identifier()
    )*
    < SEMICOLON >
  )
}

void Expression() :
{}
{
  Identifier() < EQUAL >
  (
    (
      Identifier()
      (
        < PLUS >
      | < MINUS >
      )
      Identifier()
    )
  |
    (
      (
        < PLUS >
      | < MINUS >
      )
      (
        Identifier()
        (
          < PLUS >
        | < MINUS >
        )
        Identifier()
      )
    )*
  )
  < SEMICOLON >
}

void Identifier() :
{}
{
  < IDENTIFIER >
}

void Procedure() :
{}
{
  < VOID > < MAIN > < LEFTPARENTHESES > < RIGHTPARENTHESES > < LB >
  (
    VariableDeclare()
  )*
  (
    Expression()
  )*
  < RB >
}

void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < CONSTANT >
| "(" sum() ")"
}
